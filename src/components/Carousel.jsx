import React, { useState } from 'react';
import '../styles/Carousel.css';

const experiments = [
  { title: 'Interactive Globe', description: 'A 3D globe visualization with clickable regions.', tags: ['Three.js', 'WebGL'], link: '#' },
  { title: 'Generative Art', description: 'Abstract visuals generated by code.', tags: ['P5.js'], link: '#' },
  { title: 'Physics Sim', description: 'Colliding shapes, gravity, motion.', tags: ['Matter.js'], link: '#' },
  { title: 'To-Do App', description: 'Drag-and-drop tasks with filters.', tags: ['React'], link: '#' },
  { title: 'Weather Dashboard', description: 'Fetches realtime weather.', tags: ['API'], link: '#' },
  { title: 'Memory Game', description: 'Match the cards.', tags: ['JS'], link: '#' },
];

const Carousel = () => {
  const [angle, setAngle] = useState(0);
  // Radius determines how far out the cards are from the center of rotation
  // Adjust this value based on card size and desired spacing
  const radius = 360; // Increased radius for better visual separation

  const rotateStep = 360 / experiments.length;

  const rotateCarousel = (dir) => {
    setAngle((prev) => prev + (dir === 'next' ? -rotateStep : rotateStep));
  };

  return (
    <div className="carousel-root">
      <div className="carousel-inner">
        <h2 className="carousel-title">Experiments</h2>
        <p className="carousel-subtitle">Creative UI mini-projects</p>

        <div className="carousel-wrapper">
          <div
            className="carousel-track"
            // The `translate(-50%, -50%)` here centers the *track itself* within the wrapper.
            // Then, `rotateY` rotates the entire track.
            style={{ transform: `translate(-50%, -50%) rotateY(${angle}deg)` }}
          >
            {experiments.map((exp, i) => (
              <div
                key={i}
                className="carousel-card"
                style={{
                  // First, rotate the card into its position around the Y-axis.
                  // Then, push it out along its local Z-axis (which is now rotated).
                  // Finally, translate it by -50% of its own width/height to truly center its origin.
                  transform: `rotateY(${i * rotateStep}deg) translateZ(${radius}px) translateX(-50%) translateY(-50%)`
                }}
              >
                <h3>{exp.title}</h3>
                <p>{exp.description}</p>
                <div className="tags">
                  {exp.tags.map((tag, j) => (
                    <span key={j} className="tag">{tag}</span>
                  ))}
                </div>
                <a href={exp.link} target="_blank" rel="noopener noreferrer">View</a>
              </div>
            ))}
          </div>
        </div>

        <div className="carousel-controls">
          <button onClick={() => rotateCarousel('prev')}>◀</button>
          <button onClick={() => rotateCarousel('next')}>▶</button>
        </div>
      </div>
    </div>
  );
};

export default Carousel;